// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: .proto/FileService.proto

package busproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileService_SendBootstrap_FullMethodName   = "/fileService.FileService/SendBootstrap"
	FileService_RemoveBootstrap_FullMethodName = "/fileService.FileService/RemoveBootstrap"
	FileService_SendService_FullMethodName     = "/fileService.FileService/SendService"
	FileService_RemoveService_FullMethodName   = "/fileService.FileService/RemoveService"
	FileService_SendScript_FullMethodName      = "/fileService.FileService/SendScript"
	FileService_RemoveScript_FullMethodName    = "/fileService.FileService/RemoveScript"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	SendBootstrap(ctx context.Context, in *Bootstrap, opts ...grpc.CallOption) (*FileResponse, error)
	RemoveBootstrap(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*FileResponse, error)
	SendService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*FileResponse, error)
	RemoveService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*FileResponse, error)
	SendScript(ctx context.Context, in *Script, opts ...grpc.CallOption) (*FileResponse, error)
	RemoveScript(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*FileResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) SendBootstrap(ctx context.Context, in *Bootstrap, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileService_SendBootstrap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RemoveBootstrap(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileService_RemoveBootstrap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) SendService(ctx context.Context, in *Service, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileService_SendService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RemoveService(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileService_RemoveService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) SendScript(ctx context.Context, in *Script, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileService_SendScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RemoveScript(ctx context.Context, in *ServiceInfo, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, FileService_RemoveScript_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	SendBootstrap(context.Context, *Bootstrap) (*FileResponse, error)
	RemoveBootstrap(context.Context, *ServiceInfo) (*FileResponse, error)
	SendService(context.Context, *Service) (*FileResponse, error)
	RemoveService(context.Context, *ServiceInfo) (*FileResponse, error)
	SendScript(context.Context, *Script) (*FileResponse, error)
	RemoveScript(context.Context, *ServiceInfo) (*FileResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) SendBootstrap(context.Context, *Bootstrap) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBootstrap not implemented")
}
func (UnimplementedFileServiceServer) RemoveBootstrap(context.Context, *ServiceInfo) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBootstrap not implemented")
}
func (UnimplementedFileServiceServer) SendService(context.Context, *Service) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendService not implemented")
}
func (UnimplementedFileServiceServer) RemoveService(context.Context, *ServiceInfo) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveService not implemented")
}
func (UnimplementedFileServiceServer) SendScript(context.Context, *Script) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendScript not implemented")
}
func (UnimplementedFileServiceServer) RemoveScript(context.Context, *ServiceInfo) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveScript not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_SendBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bootstrap)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).SendBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_SendBootstrap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).SendBootstrap(ctx, req.(*Bootstrap))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RemoveBootstrap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RemoveBootstrap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_RemoveBootstrap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RemoveBootstrap(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_SendService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Service)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).SendService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_SendService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).SendService(ctx, req.(*Service))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_RemoveService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RemoveService(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_SendScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Script)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).SendScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_SendScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).SendScript(ctx, req.(*Script))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RemoveScript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RemoveScript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_RemoveScript_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RemoveScript(ctx, req.(*ServiceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileService.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBootstrap",
			Handler:    _FileService_SendBootstrap_Handler,
		},
		{
			MethodName: "RemoveBootstrap",
			Handler:    _FileService_RemoveBootstrap_Handler,
		},
		{
			MethodName: "SendService",
			Handler:    _FileService_SendService_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _FileService_RemoveService_Handler,
		},
		{
			MethodName: "SendScript",
			Handler:    _FileService_SendScript_Handler,
		},
		{
			MethodName: "RemoveScript",
			Handler:    _FileService_RemoveScript_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: ".proto/FileService.proto",
}
